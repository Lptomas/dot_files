# 
# open mimeapps and othes from : https://github.com/LukeSmithxyz/voidrice/blob/master/.config/lf/lfrc
# https://www.thegeekstuff.com/2011/01/tput-command-examples/


# https://blog.fbmello.com/posts/guidelf/

#set hidden true 
set ignorecase true
set autoquit true
set icons true
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set previewer ~/.config/lf/preview
set preview true  #https://www.youtube.com/watch?v=mM_OWfaKfcg
set cleaner ~/.config/lf/cleaner
set ratios 1:2:3


#set drawbox on

# Movement    Check the names of the folders
map gh cd ~/
map gd cd ~/Documentos
map gt cd ~/Transferências
map gD cd ~/downloads
map gi cd ~/Imagens
map gg cd ~/Desktop
map gp cd ~/pCloudDrive
map gv cd ~/videos/recordings
map gs cd ~/.local/bin
map gc cd ~/.config
map gw cd ~/.config/dwm/
map ga cd ~/ARDUINO

# open mimeapps from : https://github.com/LukeSmithxyz/voidrice/blob/master/.config/lf/lfrc


# Custom Functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f evince $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty) gedit $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) ristretto $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
		setsid -f sxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*) mpv --audio-display=no $f ;;
	video/*|application/vnd.rn-realmedia) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

## Create FOLDER
cmd mkdir ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
  	printf "Directory Name: "
  	read ans
  	mkdir $ans
}}

## Create FILE
cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

#cmd setwallpaper %cp "$f" ~/.config/wall.jpg && xwallpaper --zoom "$f"

# Archive bindings
cmd unarchive ${{
  case "$f" in
	  *.tar.bz) tar -xjvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
	  *.tar.tbz) tar -xjvf "$f" ;;
      *.tar.tbz2) tar -xjvf "$f" ;;
	  *.tar.gz) tar -xzvf "$f" ;;
	  *.tar.tgz) tar -xzvf "$f" ;;	 
	  *.tar.xz) tar -xJvf "$f" ;; 
      *.tar) tar -xvf "$f" ;;
	  *.zip) unzip "$f" ;;
	  +.rar) unrar x "$f" ;;
	  *.7z) 7z x "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}






#######
# Trash bindings  -> necessita de trash-cli
cmd move_to_trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}



cmd trash_undo ${{
	$trash-put --undo
}}


cmd trash_list ${{
	clear; tput cup $(($(tput lines)/10)); tput bold
	printf "Files at trash:"
	printf "\n \n"  
	trash-list
	printf "\n" 
 	printf "press Enter to go back " 
	read ans 
}}


cmd trash_restore ${{
	$trash-restore
}}

cmd trash_clean_all ${{
	$trash-empty
}}


#  é preciso especificar o ficheiro a recoperar
cmd trash_delete_one ${{  
	$trash-rm
}}



cmd delete ${{
	clear; tput cup $(($(tput lines)/10)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}


cmd copyto ${{
	clear; tput cup $(($(tput lines)/10)); tput bold
	set -f
	  printf "Copy $f to where?: "
	  read ans
	 cp $f $ans
}}

map at copyto


# ### Bindings
# $xpto = executa comando xpto 
# $xpto "$f" = executa o comando xpto com o argumento ficheiro
# $xpto "$F" = executa o comando xpto na pasta actual

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map e  	##default edit
map c   #default cut
map p   #default paste

map b quit

#Open terminal @ present folder
map W $setsid -f alacritty >/dev/null 2>&1

# clear action like copy or selection
map <esc> clear






# Basic Functions

map <c-c> copy   # este bind fora 'lf' e em qualquer terminal é para matar o comando
map <c-x> cut
map <c-v> paste

map <f-2> rename
map <delete> delete
map <f-5> reload


map . set hidden!

map <enter> open

map mf mkfile
map md mkdir
map mu unarchive
map ma unarchive
  

#map bg setwallpaper


map dd 	move_to_trash
map dm 	move_back_from_trash
map dr 	$trash-restore
#map do 	trash_delete_one
map dl 	trash_list
map dc 	trash_clean_all	
map du 	trash_undo 



map zr set reverse!
map zn set info
map zs set info size
map zt set info time
map za set info size:time
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

 

# open files with:
#map oc $vscode "$f" ; exit
#map ol $leafpad "$f" ; exit
#map ov $nvim "$f" ; exit
#map og $gedit "$f" ; exit
#map oi $gimp "$f" ; exit
#map ot $thunar "$F" ; exit
#map ow $wine "$f"  ; exit

# open prograns  : the & puts it in the background. The disown tells the shell to not job control it. The exit tells the shell to exit.

#Using the disown command, you can remove a background job from the shell's job table, effectively "disowning" it from the shell. Once a job is disowned, it
#will continue running even if you close the terminal session that originally started it

# really need disown to open ?
map oc $code-oss "$f" & disown; exit
#map ol $leafpad "$f" & disown; exit
map ov $vim "$f" & disown; exit
map og $gedit "$f" ; exit
#map or $ristretto "$f" & disown; exit
map ors $ristretto "$f" & disown; exit
map oG $gimp "$f" & disown; exit
map ot $thunar "$F" & disown; exit    
map of $firefox & disown; exit
map ol $libreoffice "$f" & disown; exit
map ox $xed "$f" & disown; exit
map oV $vlc "$f" & disown; exit
map oM $mpv "$f" & disown; exit
